syntax = "proto3";

package flexlogger;
//national_instruments.flex_logger.automation.protocols


// Service interface for a server side test session.
service TestSession {
    // RPC call to add a note to the log file. Notes can only be added while the test session is running.
    rpc AddNote(AddNoteRequest) returns (AddNoteResponse) {}
    // RPC call to get the state of the test session.
    rpc GetState(GetTestSessionStateRequest) returns (GetTestSessionStateResponse) {}
    // RPC call to start the test session.
    rpc Start(StartTestSessionRequest) returns (StartTestSessionResponse) {}
    // RPC call to stop the test session.
    rpc Stop(StopTestSessionRequest) returns (StopTestSessionResponse) {}
    // RPC call to pause the test session.
    rpc Pause(PauseTestSessionRequest) returns (PauseTestSessionResponse) {}
    // RPC call to resume the test session.
    rpc Resume(ResumeTestSessionRequest) returns (ResumeTestSessionResponse) {}
    // RPC call to query elapsed test time
    rpc GetElapsedTestTime(GetElapsedTestTimeRequest) returns (GetElapsedTestTimeResponse) {}
}

// Request object for adding a note.
message AddNoteRequest {
    // The note to add to the log file.
    string note = 1;
}

// Response object for an add note request.
message AddNoteResponse {
}

// Request object for getting the state of the test session.
message GetTestSessionStateRequest {
}

// Response object for a get test session state request.
message GetTestSessionStateResponse {
    // The state of the test session
    TestSessionState test_session_state = 1;
}

// Request object for starting the test session.
message StartTestSessionRequest {
}

// Response object for a start test session request.
message StartTestSessionResponse {
    // Indicates if the test session was started
    bool test_session_started = 1;
}

// Request object for stopping the test session.
message StopTestSessionRequest {
}

// Response object for a stop test session request.
message StopTestSessionResponse {
    // Indicates if the test session was stopped
    bool test_session_stopped = 1;
}

// Request object for pausing the test session.
message PauseTestSessionRequest {
}

// Response object for a pause test session request.
message PauseTestSessionResponse {
    // Indicates if the test session was paused
    bool test_session_paused = 1;
}

// Request object for resuming the test session.
message ResumeTestSessionRequest {
}

// Response object for a resume test session request.
message ResumeTestSessionResponse {
    // Indicates if the test session was resumed
    bool test_session_resumed = 1;
}

// Request object for querying elapsed test time.
message GetElapsedTestTimeRequest {
}

// Response object for querying elapsed test time request.
message GetElapsedTestTimeResponse {
    // Indicates the elapsed test time (in seconds)
    double elapsed_test_time = 1;
}

enum TestSessionState {
  // The test session is idle and ready to start.
  TEST_SESSION_STATE_IDLE = 0;
  // The test session is currently running.
  TEST_SESSION_STATE_RUNNING = 2;
  // The project has an invalid configuration. The test session cannot be started.
  TEST_SESSION_STATE_INVALID_CONFIGURATION = 3;
  // The project does not have any valid channels that can be logged. The test session cannot be started.
  TEST_SESSION_STATE_NO_VALID_LOGGED_CHANNELS = 4;
  // The test session is currently paused.
  TEST_SESSION_STATE_PAUSED = 5;
}

service LoggingSpecificationDocument {
    // RPC call to get the log file base path
    rpc GetLogFileBasePath(GetLogFileBasePathRequest) returns (GetLogFileBasePathResponse) {}
    // RPC call to set the log file base path
    rpc SetLogFileBasePath(SetLogFileBasePathRequest) returns (SetLogFileBasePathResponse) {}
    // RPC call to get the log file name
    rpc GetLogFileName(GetLogFileNameRequest) returns (GetLogFileNameResponse) {}
    // RPC call to set the log file name
    rpc SetLogFileName(SetLogFileNameRequest) returns (SetLogFileNameResponse) {}
    // RPC call to get all test properties
    rpc GetTestProperties(GetTestPropertiesRequest) returns (GetTestPropertiesResponse) {}
    // RPC call to get a specific test property
    rpc GetTestProperty(GetTestPropertyRequest) returns (GetTestPropertyResponse) {}
    // RPC call to set a specific test property
    rpc SetTestProperty(SetTestPropertyRequest) returns (SetTestPropertyResponse) {}
    // RPC call to remove a specific test property
    rpc RemoveTestProperty(RemoveTestPropertyRequest) returns (RemoveTestPropertyResponse) {}
    // RPC call to get the resolved log file base path
    rpc GetResolvedLogFileBasePath(GetResolvedLogFileBasePathRequest) returns (GetResolvedLogFileBasePathResponse) {}
    // RPC call to get the resolved log file name
    rpc GetResolvedLogFileName(GetResolvedLogFileNameRequest) returns (GetResolvedLogFileNameResponse) {}
}

// Request object for getting the log file base path
message GetLogFileBasePathRequest {
    // The id for the logging specification document
    ElementIdentifier document_identifier = 1;
}

// Response object for a get log file base path request
message GetLogFileBasePathResponse {
    // The log file base path
    string log_file_base_path = 1;
}

// Request object for setting the log file base path
message SetLogFileBasePathRequest {
    // The id for the logging specification document
    ElementIdentifier document_identifier = 1;
    // The log file base path
    string log_file_base_path = 2;
}

// Response object for a set log file base path request
message SetLogFileBasePathResponse {
}

// Request object for getting the log file name
message GetLogFileNameRequest {
    // The id for the logging specification document
    ElementIdentifier document_identifier = 1;
}

// Response object for a get log file name request
message GetLogFileNameResponse {
    // The log file name
    string log_file_name = 1;
}

// Request object for setting the log file name
message SetLogFileNameRequest {
    // The id for the logging specification document
    ElementIdentifier document_identifier = 1;
    // The log file base path
    string log_file_name = 2;
}

// Response object for a set log file name
message SetLogFileNameResponse {
}

// Message that defines an individual test property
message TestProperty {
    string property_name = 1;
    string property_value = 2;
    bool prompt_on_start = 3;
}

// Request object for getting all test properties
message GetTestPropertiesRequest {
    // The id for the logging specification document
    ElementIdentifier document_identifier = 1;
}

// Response object for getting all test properties
message GetTestPropertiesResponse {
    // The test properties for the logging specification document. Can be empty.
    repeated TestProperty test_properties = 1;
}

// Request object for getting a specific test property
message GetTestPropertyRequest {
    // The id for the logging specification document
    ElementIdentifier document_identifier = 1;
    // The name of the test property to get
    string property_name = 2;
}

// Response object for getting a specific test property
message GetTestPropertyResponse {
    // The requested test property
    TestProperty test_property = 1;
}

// Request object for setting a specific test property
message SetTestPropertyRequest {
    // The id for the logging specification document
    ElementIdentifier document_identifier = 1;
    // The test property to set
    TestProperty test_property = 2;
}

// Response object for setting a specific test property
message SetTestPropertyResponse {
}

// Request object for removing a specific test property
message RemoveTestPropertyRequest {
    // The id for the logging specification document
    ElementIdentifier document_identifier = 1;
    // The name of the test property to remove
    string property_name = 2;
}

// Response object for removing a specific test property
message RemoveTestPropertyResponse {
}

// Request object for getting the resolved log file base path
message GetResolvedLogFileBasePathRequest {
    // The id for the logging specification document
    ElementIdentifier document_identifier = 1;
}

// Response object for a get resolved log file base path request
message GetResolvedLogFileBasePathResponse {
    // The resolved log file base path. The resolved base path has all placeholders converted to actual values.
    string resolved_log_file_base_path = 1;
}

// Request object for getting the resolved log file name
message GetResolvedLogFileNameRequest {
    // The id for the logging specification document
    ElementIdentifier document_identifier = 1;
}

// Response object for a get resolved log file name request
message GetResolvedLogFileNameResponse {
    // The resolved log file name.  The resolved file name has all placeholders converted to actual values.
    string resolved_log_file_name = 1;
}

// An identifier for a server side Project.
message ProjectIdentifier {
    // The automation id for a server side Project.
    string project_id = 1;
}

message ElementIdentifier {
    // The automation id for a server side Project.
    string project_id = 1;
    // The string that identifies the file in the project containing the desired element.
    string file_name = 2;
    // The string that identifies the desired element in the file.
    string element_id = 3;
    // The string that identifies a subpart of the element (such as a terminal) in the file.
    string subpart_id = 4;
}

// Service interface for a service side Log.
service Application {
    // RPC call to connect from the client to the server.
    rpc Connect(ConnectRequest) returns (ConnectResponse) {}
    // RPC call to shutdown the server.
    rpc Disconnect(DisconnectRequest) returns (DisconnectResponse) {}
    // RPT call to get the preferences directory for the application
    rpc GetPreferencesDirectory(GetPreferencesDirectoryRequest) returns (GetPreferencesDirectoryResponse) {}
}

// Message sent from the client to initiate a connection.
message ConnectRequest {}

// Message sent from the server once a connection is established.
message ConnectResponse {}

// Message sent for disconnect.
message DisconnectRequest {
    // True to cause the application to exit.  If True, this should be the last
    // call to disconect for all client sessions.
    bool exit_application = 1;
}

// The result of the disconnect message.
message DisconnectResponse {}

// Message object sent for requesting the application's preferences directory
message GetPreferencesDirectoryRequest {}

// Message object returned containing the applciation's preferences directory
message GetPreferencesDirectoryResponse {
    // Gets the application's preferences directory
    string preferences_directory = 1;
}

// Service interface for the server application.
service FlexLoggerApplication {
  // RPC call to open an existing project on the server.
  rpc OpenProject(OpenProjectRequest) returns (OpenProjectResponse) {}
  // RPC call to get the currently active (open) project from the server.
  rpc GetActiveProject(GetActiveProjectRequest) returns (GetActiveProjectResponse) {}
}

// Information necessary to open an existing Project.
message OpenProjectRequest {
    // The path to the existing project to be opened.
    string project_path = 1;
}

// An identifier used to identify a particular project.  The id is unique for
// each project that is created or opened in this instance.
message OpenProjectResponse {
    // The id of the project that was opened.
    ProjectIdentifier project = 1;
}

// Information needed to request the active project.
message GetActiveProjectRequest {
}

// Response object for the get active project request.
message GetActiveProjectResponse {
    // Indicates if there is an active project. If true, the project id will be valid. If false, the project id is not valid.
    bool active_project_available = 1;
    // The id of the active project. Should not be used if active_project_available is false.
    ProjectIdentifier project = 2;
}

// Service interface for a server side project.
service Project {
  // RPC call to open the channel specification document
  rpc OpenChannelSpecificationDocument(OpenChannelSpecificationDocumentRequest) returns (OpenChannelSpecificationDocumentResponse) {}
  // RPC call to open the logging specification document
  rpc OpenLoggingSpecificationDocument(OpenLoggingSpecificationDocumentRequest) returns (OpenLoggingSpecificationDocumentResponse) {}
  // RPC call to open the specified screen document
  rpc OpenScreenDocument(OpenScreenDocumentRequest) returns (OpenScreenDocumentResponse) {}
  // RPC call to open the test specification document
  rpc OpenTestSpecificationDocument(OpenTestSpecificationDocumentRequest) returns (OpenTestSpecificationDocumentResponse) {}
  // RPC call to close the current project.
  rpc Close(CloseProjectRequest) returns (CloseProjectResponse) {}
  // RPC call to query the file path of the current project.
  rpc GetProjectFilePath(GetProjectFilePathRequest) returns (GetProjectFilePathResponse) {}
  // RPC call to save the current project.
  rpc Save(Empty) returns (Empty) {}
}

message Empty {
}

// Information necessary to open the channel specification document.
message OpenChannelSpecificationDocumentRequest {
    // Project envoy identifier
    ProjectIdentifier project = 1;
}

// Response object for the open channel specificaiton document request.
message OpenChannelSpecificationDocumentResponse {
    // The id for the channel specification document
    ElementIdentifier document_identifier = 1;
}

// Information necessary to open the logging specification document.
message OpenLoggingSpecificationDocumentRequest {
    // Project envoy identifier
    ProjectIdentifier project = 1;
}

// Response object for the open logging specificaiton document request.
message OpenLoggingSpecificationDocumentResponse {
    // The id for the logging specification document
    ElementIdentifier document_identifier = 1;
}

// Information necessary to open a specific screen document.
message OpenScreenDocumentRequest {
    // Project envoy identifier
    ProjectIdentifier project = 1;
    // The name of the scren document to open
    string screen_name = 2;
}

// Response object for the open screen document request.
message OpenScreenDocumentResponse {
    // The id for the screen document
    ElementIdentifier document_identifier = 1;
}

// Information necessary to open the test specification document.
message OpenTestSpecificationDocumentRequest {
    // Project envoy identifier
    ProjectIdentifier project = 1;
}

// Response object for the open test specificaiton document request.
message OpenTestSpecificationDocumentResponse {
    // The id for the test specification document
    ElementIdentifier document_identifier = 1;
}

// Message sent to close the current project.
message CloseProjectRequest {
    // True to allow prompts to be displayed.
    bool allow_prompts = 1;
}

// The result of the close project message.
message CloseProjectResponse {}

// Request object for getting the project file path
message GetProjectFilePathRequest {
    // Project envoy identifier
    ProjectIdentifier project = 1;
}

// Response object for a get project file path request
message GetProjectFilePathResponse {
    // The project file path
    string project_file_path = 1;
}

// Service interface for a server side channel specification document.
service ChannelSpecificationDocument {
    // RPC call to get all channel names
    rpc GetChannelNames(GetChannelNamesRequest) returns (GetChannelNamesResponse) {}
    // RPC call to get the latest value of a double channel
    rpc GetDoubleChannelValue(GetDoubleChannelValueRequest) returns (GetDoubleChannelValueResponse) {}
    // RPC call to set the value of a double channel
    rpc SetDoubleChannelValue(SetDoubleChannelValueRequest) returns (SetDoubleChannelValueResponse) {}
    // RPC call to get a channel's enable state
    rpc IsChannelEnabled(IsChannelEnabledRequest) returns (IsChannelEnabledResponse) {}
    // RPC call to enable/disable channels
    rpc SetChannelEnabled(SetChannelEnabledRequest) returns (SetChannelEnabledResponse) {}
    // RPC call to get the data rate for a specific data rate level
    rpc GetDataRate(GetDataRateRequest) returns (GetDataRateResponse) {}
    // RPC call to set the data rate of a specific data rate level
    rpc SetDataRate(SetDataRateRequest) returns (Empty) {}
    // RPC call to get the data rate level of the subsystem that owns a channel
    rpc GetDataRateLevel(GetDataRateLevelRequest) returns (GetDataRateLevelResponse) {}
    // RPC call to set the data rate level of the subsystem that owns a channel
    rpc SetDataRateLevel(SetDataRateLevelRequest) returns (Empty) {}
    // RPC call to get the actual data rate of the subsystem that owns a channel
    rpc GetActualDataRate(GetActualDataRateRequest) returns (GetActualDataRateResponse) {}
}

// Request object for getting all channel names
message GetChannelNamesRequest {
    // The id for the channel specification document
    ElementIdentifier document_identifier = 1;
}

// Response object for getting all channel names
message GetChannelNamesResponse {
    // The channels defined in the channel specification. Can be empty.
    repeated string channel_names = 1;
}

// Request object for getting a channel value
message GetDoubleChannelValueRequest {
    // The id for the channel specification document
    ElementIdentifier document_identifier = 1;
    // The name of the channel to get a double value for
    string channel_name = 2;
}

// Response object for getting a channel value
message GetDoubleChannelValueResponse {
    // The timestamp indicating when the channel value occurred
    Timestamp value_timestamp = 1;
    // The value of the channel at the timestamp
    double channel_value = 2;
}

// Request object for setting a channel value
message SetDoubleChannelValueRequest {
    // The id for the channel specification document
    ElementIdentifier document_identifier = 1;
    // The name of the channel to get a double value for
    string channel_name = 2;
    // The value of the channel at the timestamp
    double channel_value = 3;
}

// Response object for setting a channel value
message SetDoubleChannelValueResponse {
}

// Request object for getting a channel enable state
message IsChannelEnabledRequest {
    // The id for the channel specification document
    ElementIdentifier document_identifier = 1;
    // The name of the channel to get the enable state for
    string channel_name = 2;
}

// Response object for getting a channel enable state
message IsChannelEnabledResponse {
    bool channel_enabled = 1;
}

// Request object for setting a channel enable state
message SetChannelEnabledRequest {
    // The id for the channel specification document
    ElementIdentifier document_identifier = 1;
    // The name of the channel to enable or disable
    string channel_name = 2;
    // The enable state to set
    bool channel_enabled = 3;
}

// Response object for setting a channel enable state
message SetChannelEnabledResponse {
}

// Request object for getting the data rate
message GetDataRateRequest {
    // The id for the channel specification document
    ElementIdentifier document_identifier = 1;
    // The data rate level (Slow, Medium, Fast, Counter, Digital, OnDemand)
    DataRateLevel data_rate_level = 2;
}

// Response object for getting the data rate
message GetDataRateResponse {
    // The value of the data rate
    double data_rate = 1;
}

// Request object for setting the data rate
message SetDataRateRequest {
    // The id for the channel specification document
    ElementIdentifier document_identifier = 1;
    // The data rate level (Slow, Medium, Fast, Counter, Digital, OnDemand)
    DataRateLevel data_rate_level = 2;
    // The value of the data rate to set
    double data_rate = 3;
}

// Request object for getting the data rate of a specific channel
message GetDataRateLevelRequest {
    // The id for the channel specification document
    ElementIdentifier document_identifier = 1;
    // The name of the channel in the subsystem to set the data rate to
    string channel_name = 2;
}

// Response object for getting the data rate of a specific channel
message GetDataRateLevelResponse {
    // The data rate level
    DataRateLevel data_rate_level = 1;
}

// Request object for setting the data rate level of a specific channel
message SetDataRateLevelRequest {
    // The id for the channel specification document
    ElementIdentifier document_identifier = 1;
    // The name of the channel in the subsystem to set the data rate to
    string channel_name = 2;
    // The data rate level to set
    DataRateLevel data_rate_level = 3;
}

// Request object for getting the actual data rate of a specific channel
message GetActualDataRateRequest {
    // The id for the channel specification document
    ElementIdentifier document_identifier = 1;
    // The name of the channel in the subsystem to set the data rate to
    string channel_name = 2;
}

// Response object for getting the actual data rate of a specific channel
message GetActualDataRateResponse {
    // The data rate
    double data_rate = 1;
}

message Timestamp {
  // Represents seconds of UTC time since Unix epoch
  // 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
  // 9999-12-31T23:59:59Z inclusive.
  int64 seconds = 1;

  // Non-negative fractions of a second at nanosecond resolution. Negative
  // second values with fractions must still have non-negative nanos values
  // that count forward in time. Must be from 0 to 999,999,999
  // inclusive.
  int32 nanos = 2;
}

enum DataRateLevel {
  DATA_RATE_LEVEL_NONE = 0;
  // The slow analog input rate
  DATA_RATE_LEVEL_SLOW = 1;
  // The medium analog input rate
  DATA_RATE_LEVEL_MEDIUM = 2;
  // The fast analog input rate
  DATA_RATE_LEVEL_FAST = 3;
  // The counter input rate
  DATA_RATE_LEVEL_COUNTER = 4;
  // The digital input rate
  DATA_RATE_LEVEL_DIGITAL = 6;
  // On demand sample rate
  DATA_RATE_LEVEL_ON_DEMAND = 7;
}
